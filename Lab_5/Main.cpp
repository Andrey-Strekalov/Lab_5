#include <iostream>
#include <string>
#include "Deque.h"

// Основная функция программы
int main() {
	system("chcp 1251 > nul");

	try {
		// ================================================
		// Демонстрация работы с целыми числами (int)
		// ================================================
		std::cout << "=== Тестирование дека для целых чисел (int) ===" << std::endl;

		Deque<int> intDeque;  // Создаем дек для целых чисел

		// Добавляем элементы
		intDeque.push_back(10);   // В конец: 10
		intDeque.push_front(5);   // В начало: 5, 10
		intDeque.push_back(20);   // В конец: 5, 10, 20

		// Выводим первый и последний элементы
		std::cout << "Первый элемент: " << intDeque.front() << " (ожидается 5)" << std::endl;
		std::cout << "Последний элемент: " << intDeque.back() << " (ожидается 20)" << std::endl;

		// Удаляем первый элемент
		intDeque.pop_front();
		std::cout << "Первый элемент после удаления: " << intDeque.front() << " (ожидается 10)" << std::endl;
		std::cout << "Размер дека: " << intDeque.size() << " (ожидается 2)" << std::endl;

		// ================================================
		// Демонстрация работы с числами с плавающей точкой (double)
		// ================================================
		std::cout << "\n=== Тестирование дека для чисел с плавающей точкой (double) ===" << std::endl;

		Deque<double> doubleDeque;  // Создаем дек для чисел double

		// Добавляем элементы
		doubleDeque.push_back(3.14);
		doubleDeque.push_front(2.71);

		// Выводим первый и последний элементы
		std::cout << "Первый элемент: " << doubleDeque.front() << " (ожидается 2.71)" << std::endl;
		std::cout << "Последний элемент: " << doubleDeque.back() << " (ожидается 3.14)" << std::endl;

		// ================================================
		// Демонстрация работы со строками (std::string)
		// ================================================
		std::cout << "\n=== Тестирование дека для строк (std::string) ===" << std::endl;

		Deque<std::string> stringDeque;  // Создаем дек для строк

		// Добавляем элементы
		stringDeque.push_back("мир");
		stringDeque.push_front("Привет");

		// Выводим первый и последний элементы
		std::cout << "Первый элемент: " << stringDeque.front() << " (ожидается 'Привет')" << std::endl;
		std::cout << "Последний элемент: " << stringDeque.back() << " (ожидается 'мир')" << std::endl;

		// ================================================
		// Демонстрация обработки ошибок
		// ================================================
		std::cout << "\n=== Тестирование обработки исключений ===" << std::endl;

		Deque<int> emptyDeque;  // Создаем пустой дек

		std::cout << "Попытка удалить элемент из пустого дека..." << std::endl;
		try {
			emptyDeque.pop_front();  // Попытка удаления из пустого дека
		}
		catch (const std::exception& e) {
			std::cerr << "Поймано исключение: " << e.what() << std::endl;
		}

		std::cout << "Попытка получить первый элемент пустого дека..." << std::endl;
		try {
			std::cout << emptyDeque.front() << std::endl;  // Попытка доступа к пустому деку
		}
		catch (const std::exception& e) {
			std::cerr << "Поймано исключение: " << e.what() << std::endl;
		}

		std::cout << "\nВсе тесты завершены!" << std::endl;

	}
	catch (const std::exception& e) {
		// Общий обработчик исключений
		std::cerr << "Критическая ошибка: " << e.what() << std::endl;
		return 1;  // Возвращаем код ошибки
	}

	return 0;  // Успешное завершение программы
}